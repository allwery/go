package main

import "fmt"

type Mutex struct { //новая структ 
	Count  int
	signal chan struct{} //определяет поле сигнал, которое представляет собой канал. Этот канал используется для сигнализации горутинам, которые ждут блокировки, что мутекс доступен 
}//только одна горутина может получить доступ к данным в данный момент времени

func (m *Mutex) Unlock() {
	m.signal <- struct{}{} //Эта строка отправляет пустую структуру struct{}{}  по каналу m.signal.
    // m.signal:  Доступ к каналу signal, который является полем структуры Mutex.
    // <-: Оператор отправки данных по каналу.
    // struct{}{} : Пустая структура, которая используется как маркер для сигнализации о доступности mutex.
} //разблокирует горутины

func (m *Mutex) Wait() {
	for i := 0; i < m.Count; i++ {
		<-m.signal//чтение из канала
	}
}//разблокирует доступ пока не получит все сигналы

func main() {
	m := Mutex{
		Count:  3,
		signal: make(chan struct{}, 3),
	} //3 горутины получают доступ

	for i := 0; i < 3; i++ {
		go func() {
			defer m.Unlock()
			fmt.Printf("Горутина %d: Привет, мир!\n", i)
		}()
	}
	m.Wait()
